services:
  postgres:
    image: postgres:17.4
    container_name: property_marketplace_portal
    restart: always
    ports:
      - "9876:5432"
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "db#1post"
      POSTGRES_DB: "pmp"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend_network

  userservice:
    build:
      context: ./backend
      dockerfile: userservice/Dockerfile
    container_name: user_service
    restart: always
    ports:
      - "3001:3001"
    environment:
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
    depends_on:
      - postgres
      - kafka
    networks:
      - backend_network

  propertyservice:
    build:
      context: ./backend
      dockerfile: propertyservice/Dockerfile
    container_name: property_service
    restart: always
    ports:
      - "3002:3002"
    environment:
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
    depends_on:
      - postgres
      - kafka
    networks:
      - backend_network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - backend_network

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    restart: always
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - backend_network

  kafka-bus:
    build: ./backend/kafka-bus
    container_name: kafka_bus
    restart: always
    depends_on:
      - kafka
    volumes:
      - ./backend/kafka-bus:/app
    command: npm start
    networks:
      - backend_network

networks:
  backend_network:
    driver: bridge

volumes:
  postgres_data:
    driver: local

# docker-compose up -d
# docker-compose up --build -d

# docker-compose down
# docker-compose up -d

# docker exec -it meu_postgres psql -U meu_usuario -d minha_base
# docker exec -it teste_postgre_docker psql -U postgres -d testejs
